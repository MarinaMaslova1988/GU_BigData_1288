"""
1. Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа.
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
"""

# my_list = [1, 2, 3, 'hello', 'world', 0.15, 1, 2.4, 'lesson']  # список
# list_length = int(len(my_list))  # находим длину списка
# type_list = []  # создаем список, куда будем записывать типы данных
# i = 0  # счетчик для индекса
#
# while i < list_length:
#     type_list.append(my_list[i])  # вносим в новый список само значение
#     type_list.append(type(my_list[i]))   # и его тип данных
#     i+= 1
#
# print(type_list)

"""
2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с 
индексами 0 и 1, 2 и 3 и т. д. 
При нечётном количестве элементов последний сохранить на своём месте. 
Для заполнения списка элементов нужно использовать функцию input().
"""

# my_list = list(input("Введите список: "))
# list_lenght = len(my_list)  # длина списка
#
# i = 0  # счетчик для индекса (четных чисел)
# j = 1  # счетчик для индекса (нечетных чисел)
#
# while (i < list_lenght) and (j < list_lenght):
#     my_list[i], my_list[j] = my_list[j], my_list[i]
#     i+= 2
#     j+= 2
#
# print(my_list)



"""
3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить, к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и dict.
"""

# РЕШЕНИЕ ЧЕРЕЗ СЛОВАРЬ (DICTIONARY)

# seasons_dict = {
#     'Зима': ['1', '2', '12'],
#     'Весна': ['3', '4', '5'],
#     'Лето': ['6', '7', '8'],
#     'Осень': ['9', '10', '11']
# }
#
# month_number = input("Введите номер месяца от 1 до 12: ")
#
# while (int(month_number) < 1) or (int(month_number) > 12):
#     month_number = input("Некорректно введен номер месяца. Попробуйте еще раз: ")
#
# for key, val in seasons_dict.items():
#      if month_number in val:
#          print(f'Для номера месяца {month_number} определено время года: {key}')

# РЕШЕНИЕ ЧЕРЕЗ СПИСОК (LIST)

# season_list = [
#     ['Зима', ['1', '2', '12']],
#     ['Весна', ['3', '4', '5']],
#     ['Лето', ['6', '7', '8']],
#     ['Осень', ['9', '10', '11']]
# ]
#
# month_number = input("Введите номер месяца от 1 до 12: ")
#
# while (int(month_number) < 1) or (int(month_number) > 12):
#     month_number = input("Некорректно введен номер месяца. Попробуйте еще раз: ")
#
# for season, month_numbers in season_list:
#     if month_number in month_numbers:
#         print(f'Для номера месяца {month_number} определено время года: {season}')



"""
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
"""

# my_string = input("Введите строку: ")
# my_list = my_string.split(" ")  # расщепляем строку на элементы. Разделитель - пробел
# my_list_length = len(my_list)  # длина списка
#
# i = 0   # счетчик для цикла
#
# my_list_new = [] # пустой список. Буду заносить в него элементы с учетом условия:
#                  # Если в слово длинное, выводить только первые 10 букв в слове.
#
# while i < my_list_length:
#     if len(my_list[i]) <= 10:  # если слово короткое, то записываем его в новый список "как есть"
#         my_list_new.append(my_list[i])
#     else:
#           el = str(my_list[i])  # если слово длинное, то заношу в новый список первые 10 букв
#           my_list_new.append(el[0:10])
#     i+= 1
#
# for ind, el in enumerate(my_list_new, 1):
#     print(ind, el)


"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
"""


# my_list = [10, 1, 5, 7, 5, 3, 3, 2]  # набор чисел в НЕотсортированном виде
#
# a = int(input("Введите новый элемент: "))
# my_list.append(a)          # Вносим новый элемент в список
#
# print(sorted(my_list, reverse=True)) # Выводим на экран отсортированный список от большего к меньшему

"""
6. а) Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами 
(характеристиками товара: название, цена, количество, единица измерения). 
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
Пример готовой структуры:
[
    (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
    (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
    (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})]

"""
# n = int(input("Введите количество товаров: "))
#
# products = []   # пустой список для хранения данных о товарах
# i = 1  # счетчик для нумерации товаров
#
# while i <= n:
#     name = input("Введите название товара: ")
#     price = float(input("Введите стоимость товара: "))
#     quantity = int(input("Введите количество товара: "))
#     measure = input("Введите единицу измерения: ")
#
#     products.append(
#     (i,
#         {'name': name,
#         'price': price,
#         'quantity': quantity,
#         'measure': measure}
#      ))
#
#     i+=1
#
# print(products)

"""
6. б) Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, 
например, название. Тогда значение — список значений-характеристик, например, список названий товаров.

Пример:
{
    “название”: [“компьютер”, “принтер”, “сканер”],
    “цена”: [20000, 6000, 2000],
    “количество”: [5, 2, 7],
    “ед”: [“шт.”]
}
"""


# products_dict = {
#     'name': [],
#     'price': [],
#     'quantity': [],
#     'measure': set()  # делаем множество, чтобы не было дубликатов
# }
#
# for _, item in products:
#     products_dict['name'].append(item['name'])
#     products_dict['price'].append(item['price'])
#     products_dict['quantity'].append(item['quantity'])
#     products_dict['measure'].add(item['measure'])
#
# print(products_dict)